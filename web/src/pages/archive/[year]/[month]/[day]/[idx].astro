---
import { getCollection } from "astro:content";
import SummaryLayout from "../../../../../layouts/SummaryLayout.astro";
import CalendarNav from "../../../../../components/CalendarNav.astro";
import SummaryNavigation from "../../../../../components/SummaryNavigation.astro";
import ContextModalIsland from "../../../../../components/ContextModalIsland.astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
    const allSummaries = await getCollection("summaries");

    return allSummaries.map((entry) => {
        const date = entry.data.date;
        const year = date.getFullYear().toString();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        const idx = (entry.data.index || 1).toString();

        return {
            params: { year, month, day, idx },
        };
    });
}

// Get the route parameters
const { year, month, day, idx } = Astro.params;

// Validate required parameters
if (!year || !month || !day || !idx) {
    return Astro.redirect("/no-summaries");
}

// Get all summaries
const allSummaries = await getCollection("summaries");

// Find the matching summary by comparing date components and index
const summary = allSummaries.find((entry: CollectionEntry<"summaries">) => {
    const date = entry.data.date;
    const entryYear = date.getFullYear().toString();
    const entryMonth = String(date.getMonth() + 1).padStart(2, "0");
    const entryDay = String(date.getDate()).padStart(2, "0");
    const entryIndex = entry.data.index || 1;

    return (
        entryYear === year &&
        entryMonth === month &&
        entryDay === day &&
        entryIndex === Number(idx)
    );
});

// If no matching summary, redirect
if (!summary) {
    return Astro.redirect("/no-summaries");
}

// Render the summary content
const { Content } = await summary.render();

// Format date for UI
const formattedDate = summary.data.date.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
});
---

<SummaryLayout title={summary.data.title || `Summary for ${formattedDate}`}>
    <div class="flex flex-col md:flex-row gap-8">
        <div class="md:w-3/4">
            <SummaryNavigation
                currentSummary={summary}
                allSummaries={allSummaries}
            />

            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                <div class="prose prose-lg dark:prose-invert max-w-none">
                    <Content />
                </div>

                <ContextModalIsland year={year} month={month} day={day} />
            </div>
        </div>

        <div class="md:w-1/4">
            <CalendarNav summaries={allSummaries} currentSummary={summary} />
        </div>
    </div>
</SummaryLayout>
