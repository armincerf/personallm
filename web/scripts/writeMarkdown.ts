#!/usr/bin/env bun
import fs from "node:fs/promises";
import path from "node:path";
import matter from "gray-matter";

/**
 * Writes a summary Markdown file compatible with the Astro content collection.
 * Assumes it's being called from the project root directory.
 *
 * @param date - The JavaScript Date object for the summary.
 * @param index - The sequential index for summaries on the same day (starts at 1).
 * @param title - An optional title for the summary.
 * @param summary - The Markdown content generated by the LLM.
 */
export async function writeSummaryAsMd({
	date,
	index,
	title,
	summary,
}: {
	date: Date;
	index: number;
	title?: string;
	summary: string;
}) {
	const projectRoot = process.cwd();
	const YYYY = String(date.getFullYear());
	const MM = String(date.getMonth() + 1).padStart(2, "0");
	const DD = String(date.getDate()).padStart(2, "0");

	// Directory for Markdown file within the web structure
	const mdDir = path.join(
		projectRoot, // Use project root
		"web", // Navigate into web/
		"src",
		"content",
		"summaries",
		YYYY,
		MM,
	);

	// Ensure the target directory exists
	await fs.mkdir(mdDir, { recursive: true });

	// Markdown Filename (e.g., DD-1.md)
	const baseName = `${DD}-${index}`;
	const mdPath = path.join(mdDir, `${baseName}.md`);

	// Context Filename (just the name for front-matter reference)
	const ctxFileName = `${DD}.ctx.br`; // e.g., 20.ctx.br

	// Prepare front‑matter
	const fm = {
		date: `${YYYY}-${MM}-${DD}`, // Format for Astro/YAML
		index,
		...(title ? { title } : {}),
		// Reference the context file name. The aggregator writes this separately.
		contextFile: ctxFileName,
	};

	// Stringify Markdown + front‑matter
	const mdContent = matter.stringify(summary, fm);

	// Write the .md file
	try {
		await fs.writeFile(mdPath, mdContent, "utf-8");
		console.log(`✔︎ [Aggregator] Wrote summary markdown to ${mdPath}`); // Log identifies source
	} catch (error) {
		console.error(
			`❌ [Aggregator] Error writing summary markdown to ${mdPath}:`,
			error,
		);
		// Decide if you want to throw the error or just log it
		// throw error; // Optional: re-throw to potentially stop aggregator cycle?
	}
}
